{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Out of Order Core"}},"allMarkdownRemark":{"nodes":[{"excerpt":"In this post, we’ll take a brief look at the paper: This post only takes a brief look at the concept described in the paper and I highly…","fields":{"slug":"/row-clone/"},"frontmatter":{"date":"July 02, 2021","title":"RowClone: Fast and energy-efficient in-DRAM bulk data copy and initialization","description":"As we try to squeeze in more and more memory cells into DRAM, some of the assumptions we has made previously no longer remain true. Row Hammer is an hardware exploit that takes advantage of electrical disturbance cause by DRAM row activate to flip bits in memory. In this post, we discuss briefly how and why Row Hammer exploit exists."}},{"excerpt":"This post we’ll take a look at Row Hammer, a read disturbance phenomenon observed in commodity DRAM, first unearthed in the paper: In this…","fields":{"slug":"/row-hammer/"},"frontmatter":{"date":"July 02, 2021","title":"Row Hammer: Flipping Bits in Memory Without Accessing Them","description":"As we try to squeeze in more and more memory cells into DRAM, some of the assumptions we has made previously no longer remain true. Row Hammer is an hardware exploit that takes advantage of electrical disturbance cause by DRAM row activate to flip bits in memory. In this post, we discuss briefly how and why Row Hammer exploit exists."}},{"excerpt":"Today we will discuss the concept put forward by an amazing paper titled: This post takes a brief look at the concept however the paper goes…","fields":{"slug":"/processing-using-memory/"},"frontmatter":{"date":"July 02, 2021","title":"Processing using Memory (PuM)","description":"Over the years as computer systems have exponentially improved in efficiency and performance, one thing still remains a huge bottleneck - memory. A lot of energy is spend in moving data to and from Processor only to be used a couple of times in most cases for computation. With data increasing at an unprecedented rate, the need for a solution is dire. Architects are now looking at storage systems to be used, not just for storage, but also for computation. In this post, we'll look at one such architecture known as Processing using Memory (PuM)."}},{"excerpt":"This post is based on the attack covered in the paper: This post covers the attack is brief however I recommend reading the paper to get the…","fields":{"slug":"/ridl/"},"frontmatter":{"date":"July 02, 2021","title":"RIDL: Rogue In-flight Data Load ","description":"Comparing for equality between two numbers takes log2(n) levels of 2-input and gate, where n is number of binary digits in the numbers. To improve performance and reduce logic size, one can get away by comparing only lower few digits assuming upper digits are equal. In Predictive Data Forwarding, CPU speculatively forwards data in Line Fill Buffer and Store Buffer to outstanding loads if the lower bits of address match. This improves performance in case the speculation is right however in case of a mis-speculation, the data belonging to one process might end up with another, albeit for a short period of time, before CPU state being reset to the one before speculation began. Rogue In-flight Data Load exploits this to leak secret using cache based side channel and timing analysis."}},{"excerpt":"This bug in Apple M1 was discovered by Hector Martin (link opens a new tab) during his research for adding GNU/Linux support for Apple M…","fields":{"slug":"/m1racles/"},"frontmatter":{"date":"July 02, 2021","title":"M1RACLES: M1ssing Register Access Controls Leak EL0 State","description":"In this post e taka a look at M1RACLES, a harmless exploit that exists in the new Apple M1 SoC. The exploit involves using a 2-bit register exposed to userspace program as a side-channel to send data across co-operating processes. Despite there being more efficient side channels to send data between co-operating processes, M1RACLES got it's own CVE as it provides a channel for two processes to talk to each other without the intervention of Operating System which goes against the ode principles of n operating system."}},{"excerpt":"In our last few posts we looked at Timing Analysis and techniques such as Flush and Reload, and Prime and Probe that exploit timing…","fields":{"slug":"/power-analysis/"},"frontmatter":{"date":"July 02, 2021","title":"Power Analysis","description":"Just like ho measuring time taken to run instruction can give insights on runtime of victim program, measuring power consumption of CPU can also give insights on runtime of program. In this post, we lay the groundwork for understanding attacks that uses power consumption as a side channel to leak secrets from victim's address space."}},{"excerpt":"This article is based on the paper In this article we’ll take a brief look at Spectre attack however I highly recommend reading the paper…","fields":{"slug":"/spectre/"},"frontmatter":{"date":"July 02, 2021","title":"Spectre: Exploiting speculative execution","description":"Just like Meltdown, discussed previously, Spectre is another microarchitectural exploit that takes advantage of speculative execution, and the fact that hyper-threaded cores share the same Branch Target Buffer, to manipulate the execution path of victim program and leak secrets from victim's address space. In this post, we'll take a brief look at Specter and the microarchitectural implementation that allows for the exploit."}},{"excerpt":"In this post, we’ll take a brief look at branch prediction. To learn more about branch prediction and the hardware implementation of branch…","fields":{"slug":"/branch-prediction/"},"frontmatter":{"date":"July 02, 2021","title":"Branch Prediction","description":"Branch Prediction is a technique employed by modern microprocessors to prevent stalling on conditional branches by speculating their outcome and executing along the speculated path. In this post we'll take a look at reasoning behind branch prediction, its evolution, and why it makes sense to be featured in general purpose processors."}},{"excerpt":"This article is based on the paper: In this article we’ll take a brief look at Meltdown attack however I highly recommend reading the paper…","fields":{"slug":"/meltdown/"},"frontmatter":{"date":"July 02, 2021","title":"Meltdown: Reading Kernel Memory from User Space","description":"Meltdown is one of the most popular CPU vulnerability that exploits the feature of modern processors such as Speculative Execution and the delay in permission check for memory access, to read data, a userspace process shouldn't have access to. In this post, we'll take a brief look at the exploit that brought security to forefront of microarchitectural design."}},{"excerpt":"Most of the recent CPU vulnerability discovered depend on the property of modern processors known as Speculative Execution. In this post, we…","fields":{"slug":"/speculative-execution/"},"frontmatter":{"date":"June 27, 2021","title":"Speculative Execution","description":"Some of the most serious microarchitectural vulnerabilities discovered in recent times such as Spectre and Meltdown exploit the feature in modern processors called Speculative Execution. In this post we'll take a brief look at Speculative Execution and reason why modern processors speculate in certain scenarios, and why it has become a security concern."}},{"excerpt":"This is the third post in our series of Timing Analysis and I high recommend reading the first two posts - Timing Analysis (link opens a new…","fields":{"slug":"/prime-and-probe/"},"frontmatter":{"date":"June 23, 2021","title":"Prime and Probe","description":"Most cache side channel attacks requires a method to extract the secret from the cache. Flush and Reload is one such method to extract data from cache side channel that cache replacment policy to leak secrets. It can be used in systems that don't offer an unprivileged instruction to invalidate cache lines."}},{"excerpt":"This is the second post in series of timing analysis. If you haven’t read the first post - Timing Analysis (link opens a new tab), I highly…","fields":{"slug":"/flush-and-reload/"},"frontmatter":{"date":"June 23, 2021","title":"Flush and Reload","description":"Most cache side channel attacks requires a method to extract the secret from the cache. Flush and Reload is one such method to extract data from cache side channel that exploits cache invalidation instruction and accurate timers to achieve the goal"}},{"excerpt":"Welcome to out of order core, a blog that looks into computer micro-architecture and the micro-architectural vulnerabilities. Over the…","fields":{"slug":"/timing-analysis/"},"frontmatter":{"date":"June 22, 2021","title":"Timing Analysis","description":"Timing Analysis is the core of most side channel attacks. In this post, we dissect the root cause that enables timing analysis and give a foundation for upcoming series of posts."}}]}},"pageContext":{}},"staticQueryHashes":["2841359383","3257411868"]}